{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\nimport enums from '../../enums';\n\nclass PropertyManagement extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getNeighborhoodList\", async () => {\n      const result = await fetch('http://localhost:8000/neighborhood').then(res => res.json()).then(list => {\n        if (list) {\n          this.setState({\n            neighborhood: list\n          });\n        }\n      }).catch(() => this.setState({\n        sendStatus: 'Erro ao encontrar lista de bairros'\n      }));\n      return result;\n    });\n\n    _defineProperty(this, \"getTypeList\", async () => {\n      const result = await fetch('http://localhost:8000/typeproperty').then(res => res.json()).then(list => {\n        if (list) {\n          this.setState({\n            type: list\n          });\n        }\n      }).catch(() => this.setState({\n        sendStatus: 'Erro ao encontrar lista de tipos'\n      }));\n      return result;\n    });\n\n    _defineProperty(this, \"onSubmit\", () => {\n      const selectBlock = document.getElementById('neighborhood-list').value;\n      const selectType = document.getElementById('property-type').value;\n      const purpose = document.querySelector('input[name=\"purpose\"]:checked').value;\n      const price = document.getElementById('price').value; // if (neighborhood === 0 || contactName.length === 0) {\n      //   this.setState({\n      //     sendStatus: 'Ops, algo de errado aconteceu, recarregue a pÃ¡gina!!',\n      //   });\n      // } else {\n      //   this.setState({ sendStatus: 'Enviando ...' });\n      //   fetch('https://dry-island-26655.herokuapp.com/contactLMS', {\n      //     method: 'post',\n      //     headers: { 'Content-Type': 'application/json' },\n      //     body: JSON.stringify({\n      //       email: contactEmail,\n      //       message: contactMessage,\n      //       name: contactName,\n      //       phone: contactPhone,\n      //     }),\n      //   })\n      //     .then((response) => response.json())\n      //     .then((message) => {\n      //       if (message) {\n      //         this.setState({\n      //           sendStatus: 'Enviada com sucesso',\n      //         });\n      //       }\n      //     })\n      //     .catch((err) => {\n      //       this.setState({\n      //         sendStatus: 'Algo deu errado, tente novamente mais tarde',\n      //       });\n      //     });\n      // }\n    });\n\n    this.state = {\n      neighborhood: [],\n      type: [],\n      purpose: '',\n      sendStatus: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getNeighborhoodList();\n    this.getTypeList();\n  }\n\n  render() {\n    const {\n      neighborhood,\n      type,\n      sendStatus\n    } = this.state;\n    return __jsx(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, \"Inserir Propriedade\"), __jsx(Select, {\n      hasLabel: true,\n      htmlFor: \"neighborhood-list\",\n      label: \"Bairro\",\n      options: neighborhood,\n      getInputValue: this.getInputValue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }), __jsx(Select, {\n      hasLabel: true,\n      htmlFor: \"property-type\",\n      label: \"Tipo de im\\xF3vel\",\n      options: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), __jsx(Radio, {\n      hasLabel: true,\n      htmlFor: \"radioOne\",\n      label: \"Loca\\xE7\\xE3o\",\n      name: \"purpose\",\n      value: enums.purposeOfProperty.renting,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }), __jsx(Radio, {\n      hasLabel: true,\n      htmlFor: \"radioTwo\",\n      label: \"Venda\",\n      value: enums.purposeOfProperty.selling,\n      name: \"purpose\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), __jsx(Input, {\n      hasLabel: true,\n      htmlFor: \"price\",\n      label: \"Pre\\xE7o\",\n      required: true,\n      type: \"number\",\n      min: \"0\",\n      max: \"10000000000\",\n      step: \"500\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), __jsx(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      type: type || 'button',\n      onClick: this.onSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Cadastrar\")), sendStatus);\n  }\n\n} // const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\n\nconst Label = props => {\n  const {\n    hasLabel,\n    label,\n    htmlFor\n  } = props;\n\n  if (hasLabel === true) {\n    return __jsx(\"label\", {\n      htmlFor: htmlFor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 203\n      },\n      __self: this\n    }, label);\n  }\n\n  return null;\n};\n\nconst Input = props => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    hasLabel,\n    max,\n    min,\n    placeholder,\n    step,\n    type\n  } = props;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: htmlFor,\n    max: max || null,\n    min: min || null,\n    name: name || null,\n    placeholder: placeholder || null,\n    required: required || null,\n    step: step || null,\n    type: type || 'text',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }));\n};\n\nconst Radio = props => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    value\n  } = props;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    type: \"radio\",\n    value: value,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }), label));\n};\n\nconst Select = props => {\n  const {\n    hasLabel,\n    htmlFor,\n    label,\n    name,\n    required,\n    options,\n    id\n  } = props;\n  const arrayOptions = options.map(item => item.name || item.type); // eslint-disable-next-line max-len\n\n  const selectOptionsList = arrayOptions.map((option, index) => __jsx(\"option\", {\n    key: option,\n    value: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, option));\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), __jsx(\"select\", {\n    defaultValue: \"\",\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Escolha uma op\\xE7\\xE3o\"), selectOptionsList));\n};\n\nexport default PropertyManagement;","map":{"version":3,"sources":["/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx"],"names":["React","fetch","enums","PropertyManagement","Component","constructor","props","result","then","res","json","list","setState","neighborhood","catch","sendStatus","type","selectBlock","document","getElementById","value","selectType","purpose","querySelector","price","state","componentDidMount","getNeighborhoodList","getTypeList","render","getInputValue","purposeOfProperty","renting","selling","onSubmit","Label","hasLabel","label","htmlFor","Input","name","required","max","min","placeholder","step","Radio","Select","options","id","arrayOptions","map","item","selectOptionsList","option","index"],"mappings":"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","sourcesContent":["/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\n\nimport enums from '../../enums';\n\nclass PropertyManagement extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      neighborhood: [],\n      type: [],\n      purpose: '',\n      sendStatus: '',\n    };\n  }\n\n  componentDidMount() {\n    this.getNeighborhoodList();\n    this.getTypeList();\n  }\n\n  getNeighborhoodList = async () => {\n    const result = await fetch('http://localhost:8000/neighborhood')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ neighborhood: list });\n        }\n      })\n      .catch(() => this.setState({ sendStatus: 'Erro ao encontrar lista de bairros' }));\n\n    return result;\n  }\n\n  getTypeList = async () => {\n    const result = await fetch('http://localhost:8000/typeproperty')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ type: list });\n        }\n      })\n      .catch(() => this.setState({ sendStatus: 'Erro ao encontrar lista de tipos' }));\n\n    return result;\n  }\n\n\n  onSubmit = () => {\n    const selectBlock = document.getElementById('neighborhood-list').value;\n    const selectType = document.getElementById('property-type').value;\n    const purpose = document.querySelector('input[name=\"purpose\"]:checked').value;\n    const price = document.getElementById('price').value;\n\n    // if (neighborhood === 0 || contactName.length === 0) {\n    //   this.setState({\n    //     sendStatus: 'Ops, algo de errado aconteceu, recarregue a pÃ¡gina!!',\n    //   });\n    // } else {\n    //   this.setState({ sendStatus: 'Enviando ...' });\n    //   fetch('https://dry-island-26655.herokuapp.com/contactLMS', {\n    //     method: 'post',\n    //     headers: { 'Content-Type': 'application/json' },\n    //     body: JSON.stringify({\n    //       email: contactEmail,\n    //       message: contactMessage,\n    //       name: contactName,\n    //       phone: contactPhone,\n    //     }),\n    //   })\n    //     .then((response) => response.json())\n    //     .then((message) => {\n    //       if (message) {\n    //         this.setState({\n    //           sendStatus: 'Enviada com sucesso',\n    //         });\n    //       }\n    //     })\n    //     .catch((err) => {\n    //       this.setState({\n    //         sendStatus: 'Algo deu errado, tente novamente mais tarde',\n    //       });\n    //     });\n    // }\n  }\n\n\n  render() {\n    const {\n      neighborhood,\n      type,\n      sendStatus,\n    } = this.state;\n\n    return (\n      <form>\n        <h2>Inserir Propriedade</h2>\n\n\n        <Select\n          hasLabel\n          htmlFor=\"neighborhood-list\"\n          label=\"Bairro\"\n          options={neighborhood}\n          getInputValue={this.getInputValue}\n        />\n\n        <Select\n          hasLabel\n          htmlFor=\"property-type\"\n          label=\"Tipo de imÃ³vel\"\n          options={type}\n        />\n\n        {/*\n        <Checkbox\n          hasLabel\n          htmlFor=\"checkbox\"\n          label=\"Checkbox\"\n          required\n        /> */}\n\n        <Radio\n          hasLabel\n          htmlFor=\"radioOne\"\n          label=\"LocaÃ§Ã£o\"\n          name=\"purpose\"\n          value={enums.purposeOfProperty.renting}\n          required\n        />\n\n        <Radio\n          hasLabel\n          htmlFor=\"radioTwo\"\n          label=\"Venda\"\n          value={enums.purposeOfProperty.selling}\n          name=\"purpose\"\n          required\n        />\n\n        <Input\n          hasLabel\n          htmlFor=\"price\"\n          label=\"PreÃ§o\"\n          required\n          type=\"number\"\n          min=\"0\"\n          max=\"10000000000\"\n          step=\"500\"\n        />\n\n        <fieldset>\n          <button\n            type={type || 'button'}\n            onClick={this.onSubmit}\n          >\n            Cadastrar\n          </button>\n        </fieldset>\n        {sendStatus}\n\n      </form>\n    );\n  }\n}\n\n\n// const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\nconst Label = (props) => {\n  const {\n    hasLabel,\n    label,\n    htmlFor,\n  } = props;\n\n  if (hasLabel === true) {\n    return <label htmlFor={htmlFor}>{label}</label>;\n  }\n\n  return null;\n};\n\nconst Input = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    hasLabel,\n    max,\n    min,\n    placeholder,\n    step,\n    type,\n  } = props;\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <input\n        id={htmlFor}\n        max={max || null}\n        min={min || null}\n        name={name || null}\n        placeholder={placeholder || null}\n        required={required || null}\n        step={step || null}\n        type={type || 'text'}\n      />\n    </fieldset>\n  );\n};\n\nconst Radio = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    value,\n  } = props;\n\n  return (\n    <fieldset>\n      <label\n        htmlFor={htmlFor}\n        label={label}\n      >\n        <input\n          id={htmlFor}\n          name={name || null}\n          required={required || null}\n          type=\"radio\"\n          value={value}\n        />\n        {label}\n      </label>\n    </fieldset>\n  );\n};\n\n\nconst Select = (props) => {\n  const {\n    hasLabel,\n    htmlFor,\n    label,\n    name,\n    required,\n    options,\n    id,\n  } = props;\n\n  const arrayOptions = options.map((item) => item.name || item.type);\n\n  // eslint-disable-next-line max-len\n  const selectOptionsList = arrayOptions.map((option, index) => <option key={option} value={index}>{option}</option>);\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <select\n        defaultValue=\"\"\n        id={htmlFor}\n        name={name || null}\n        required={required || null}\n      >\n        <option value=\"\" disabled>Escolha uma opÃ§Ã£o</option>\n\n        {selectOptionsList}\n      </select>\n    </fieldset>\n  );\n};\n\n\nexport default PropertyManagement;\n"]},"metadata":{},"sourceType":"module"}