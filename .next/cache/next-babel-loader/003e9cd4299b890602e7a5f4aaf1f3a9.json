{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"@babel/runtime-corejs2/helpers/esm/assertThisInitialized\";\nimport _inherits from \"@babel/runtime-corejs2/helpers/esm/inherits\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\nimport enums from '../../enums';\n\nvar PropertyManagement =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(PropertyManagement, _React$Component);\n\n  function PropertyManagement(props) {\n    var _this;\n\n    _classCallCheck(this, PropertyManagement);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PropertyManagement).call(this, props));\n\n    _defineProperty(_assertThisInitialized(_this), \"setPurposeValue\", function (e) {\n      _this.setState(e.target.value);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getNeighborhoodList\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch('http://localhost:8000/neighborhood').then(function (res) {\n                return res.json();\n              }).then(function (list) {\n                if (list) {\n                  _this.setState({\n                    neighborhood: list\n                  });\n                }\n              })[\"catch\"](function () {\n                return _this.setState({\n                  message: 'Erro ao encontrar lista de bairros'\n                });\n              });\n\n            case 2:\n              result = _context.sent;\n              return _context.abrupt(\"return\", result);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })));\n\n    _defineProperty(_assertThisInitialized(_this), \"getTypeList\",\n    /*#__PURE__*/\n    _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2() {\n      var result;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetch('http://localhost:8000/typeproperty').then(function (res) {\n                return res.json();\n              }).then(function (list) {\n                if (list) {\n                  _this.setState({\n                    type: list\n                  });\n                }\n              })[\"catch\"](function () {\n                return _this.setState({\n                  message: 'Erro ao encontrar lista de tipos'\n                });\n              });\n\n            case 2:\n              result = _context2.sent;\n              return _context2.abrupt(\"return\", result);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n\n    _this.state = {\n      data: props.data,\n      neighborhood: [],\n      type: [],\n      messages: '',\n      purpose: ''\n    };\n    return _this;\n  }\n\n  _createClass(PropertyManagement, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getNeighborhoodList();\n      this.getTypeList();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          neighborhood = _this$state.neighborhood,\n          messages = _this$state.messages,\n          type = _this$state.type,\n          purpose = _this$state.purpose;\n      return __jsx(\"form\", {\n        method: \"\",\n        action: \"\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }, __jsx(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65\n        },\n        __self: this\n      }, \"Inserir Propriedade\"), __jsx(Select, {\n        hasLabel: true,\n        htmlFor: \"select\",\n        label: \"Bairro\",\n        options: neighborhood,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }), __jsx(Select, {\n        hasLabel: true,\n        htmlFor: \"select\",\n        label: \"Tipo de im\\xF3vel\",\n        options: type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }), __jsx(Radio, {\n        hasLabel: true,\n        setPurposeValue: this.setPurposeValue,\n        htmlFor: \"radioOne\",\n        label: \"Loca\\xE7\\xE3o\",\n        name: \"radios\",\n        purpose: enums.purposeOfProperty.renting,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89\n        },\n        __self: this\n      }), __jsx(Radio, {\n        hasLabel: true,\n        htmlFor: \"radioTwo\",\n        label: \"Venda\",\n        setPurposeValue: this.setPurposeValue,\n        purpose: enums.purposeOfProperty.selling,\n        name: \"radios\",\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }), __jsx(Input, {\n        hasLabel: true,\n        htmlFor: \"numberInput\",\n        label: \"Pre\\xE7o\",\n        required: true,\n        type: \"number\",\n        purpose: purpose,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), __jsx(Button, {\n        type: \"submit\",\n        value: \"submit\",\n        text: \"Send form\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return PropertyManagement;\n}(React.Component);\n\nvar Button = function Button(props) {\n  var type = props.type,\n      value = props.value,\n      text = props.text;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: type || 'button',\n    value: value || null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, text));\n}; // const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\n\nvar Label = function Label(props) {\n  var hasLabel = props.hasLabel,\n      label = props.label,\n      htmlFor = props.htmlFor;\n\n  if (hasLabel === true) {\n    return __jsx(\"label\", {\n      htmlFor: htmlFor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, label);\n  }\n\n  return null;\n};\n\nvar Input = function Input(props) {\n  var htmlFor = props.htmlFor,\n      label = props.label,\n      name = props.name,\n      required = props.required,\n      hasLabel = props.hasLabel,\n      placeholder = props.placeholder,\n      type = props.type,\n      purpose = props.purpose;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: htmlFor,\n    max: purpose == enums.purposeOfProperty.renting ? 50000 : 10000000 || null,\n    min: purpose == enums.purposeOfProperty.renting ? 200 : 10000 || null,\n    name: name || null,\n    placeholder: placeholder || null,\n    required: required || null,\n    step: purpose == enums.purposeOfProperty.renting ? 50 : 5000 || null,\n    type: type || 'text',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }));\n};\n\nvar Radio = function Radio(props) {\n  var htmlFor = props.htmlFor,\n      label = props.label,\n      name = props.name,\n      required = props.required,\n      setPurposeValue = props.setPurposeValue,\n      purpose = props.purpose;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    type: \"radio\",\n    onClick: setPurposeValue,\n    value: purpose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }), label));\n};\n\nvar Select = function Select(props) {\n  var hasLabel = props.hasLabel,\n      htmlFor = props.htmlFor,\n      label = props.label,\n      name = props.name,\n      required = props.required,\n      options = props.options;\n  var arrayOptions = options.map(function (item) {\n    return item.name || item.type;\n  }); // eslint-disable-next-line max-len\n\n  var selectOptionsList = arrayOptions.map(function (option, index) {\n    return __jsx(\"option\", {\n      key: option,\n      value: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 267\n      },\n      __self: this\n    }, option);\n  });\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }), __jsx(\"select\", {\n    defaultValue: \"\",\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \"Escolha uma op\\xE7\\xE3o\"), selectOptionsList));\n};\n\nexport default PropertyManagement;","map":{"version":3,"sources":["/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx"],"names":["React","fetch","enums","PropertyManagement","props","e","setState","target","value","then","res","json","list","neighborhood","message","result","type","state","data","messages","purpose","getNeighborhoodList","getTypeList","setPurposeValue","purposeOfProperty","renting","selling","Component","Button","text","Label","hasLabel","label","htmlFor","Input","name","required","placeholder","Radio","Select","options","arrayOptions","map","item","selectOptionsList","option","index"],"mappings":"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","sourcesContent":["/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\n\nimport enums from '../../enums';\n\nclass PropertyManagement extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n      neighborhood: [],\n      type: [],\n      messages: '',\n      purpose: '',\n    };\n  }\n\n\n  componentDidMount() {\n    this.getNeighborhoodList();\n    this.getTypeList();\n  }\n\n  setPurposeValue = (e) => {\n    this.setState(e.target.value);\n  }\n\n  getNeighborhoodList = async () => {\n    const result = await fetch('http://localhost:8000/neighborhood')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ neighborhood: list });\n        }\n      })\n      .catch(() => this.setState({ message: 'Erro ao encontrar lista de bairros' }));\n\n    return result;\n  }\n\n  getTypeList = async () => {\n    const result = await fetch('http://localhost:8000/typeproperty')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ type: list });\n        }\n      })\n      .catch(() => this.setState({ message: 'Erro ao encontrar lista de tipos' }));\n\n    return result;\n  }\n\n  render() {\n    const {\n      neighborhood,\n      messages,\n      type,\n      purpose,\n    } = this.state;\n\n    return (\n      <form method=\"\" action=\"\">\n        <h2>Inserir Propriedade</h2>\n\n\n        <Select\n          hasLabel\n          htmlFor=\"select\"\n          label=\"Bairro\"\n          options={neighborhood}\n        />\n\n        <Select\n          hasLabel\n          htmlFor=\"select\"\n          label=\"Tipo de imóvel\"\n          options={type}\n        />\n        {/*\n        <Checkbox\n          hasLabel\n          htmlFor=\"checkbox\"\n          label=\"Checkbox\"\n          required\n        /> */}\n\n        <Radio\n          hasLabel\n          setPurposeValue={this.setPurposeValue}\n          htmlFor=\"radioOne\"\n          label=\"Locação\"\n          name=\"radios\"\n          purpose={enums.purposeOfProperty.renting}\n          required\n        />\n\n        <Radio\n          hasLabel\n          htmlFor=\"radioTwo\"\n          label=\"Venda\"\n          setPurposeValue={this.setPurposeValue}\n          purpose={enums.purposeOfProperty.selling}\n          name=\"radios\"\n          required\n        />\n\n        <Input\n          hasLabel\n          htmlFor=\"numberInput\"\n          label=\"Preço\"\n          required\n          type=\"number\"\n          purpose={purpose}\n        />\n\n        <Button\n          type=\"submit\"\n          value=\"submit\"\n          text=\"Send form\"\n        />\n\n      </form>\n    );\n  }\n}\n\nconst Button = (props) => {\n  const {\n    type,\n    value,\n    text,\n  } = props;\n\n  return (\n    <fieldset>\n      <button\n        type={type || 'button'}\n        value={value || null}\n      >\n        {text}\n      </button>\n    </fieldset>\n  );\n};\n\n\n// const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\nconst Label = (props) => {\n  const {\n    hasLabel,\n    label,\n    htmlFor,\n  } = props;\n\n  if (hasLabel === true) {\n    return <label htmlFor={htmlFor}>{label}</label>;\n  }\n\n  return null;\n};\n\nconst Input = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    hasLabel,\n    placeholder,\n    type,\n    purpose,\n  } = props;\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <input\n        id={htmlFor}\n        max={purpose == enums.purposeOfProperty.renting ? 50000 : 10000000 || null}\n        min={purpose == enums.purposeOfProperty.renting ? 200 : 10000 || null}\n        name={name || null}\n        placeholder={placeholder || null}\n        required={required || null}\n        step={purpose == enums.purposeOfProperty.renting ? 50 : 5000 || null}\n        type={type || 'text'}\n      />\n    </fieldset>\n  );\n};\n\nconst Radio = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    setPurposeValue,\n    purpose,\n  } = props;\n\n  return (\n    <fieldset>\n      <label\n        htmlFor={htmlFor}\n        label={label}\n      >\n        <input\n          id={htmlFor}\n          name={name || null}\n          required={required || null}\n          type=\"radio\"\n          onClick={setPurposeValue}\n          value={purpose}\n        />\n        {label}\n      </label>\n    </fieldset>\n  );\n};\n\n\nconst Select = (props) => {\n  const {\n    hasLabel,\n    htmlFor,\n    label,\n    name,\n    required,\n    options,\n  } = props;\n\n  const arrayOptions = options.map((item) => item.name || item.type);\n\n  // eslint-disable-next-line max-len\n  const selectOptionsList = arrayOptions.map((option, index) => <option key={option} value={index}>{option}</option>);\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <select\n        defaultValue=\"\"\n        id={htmlFor}\n        name={name || null}\n        required={required || null}\n      >\n        <option value=\"\" disabled>Escolha uma opção</option>\n\n        {selectOptionsList}\n      </select>\n    </fieldset>\n  );\n};\n\n\nexport default PropertyManagement;\n"]},"metadata":{},"sourceType":"module"}