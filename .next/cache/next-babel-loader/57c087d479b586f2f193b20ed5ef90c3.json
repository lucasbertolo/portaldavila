{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\n\nclass PropertyManagement extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getNeighborhoodList\", async () => {\n      const result = await fetch('http://localhost:8000/neighborhood').then(res => res.json()).then(list => {\n        if (list) {\n          this.setState({\n            neighborhood: list\n          });\n        }\n      }).catch(() => this.setState({\n        sendStatus: 'Erro ao encontrar lista de bairros'\n      }));\n      return result;\n    });\n\n    _defineProperty(this, \"getTypeList\", async () => {\n      const result = await fetch('http://localhost:8000/typeproperty').then(res => res.json()).then(list => {\n        if (list) {\n          this.setState({\n            type: list\n          });\n        }\n      }).catch(() => this.setState({\n        sendStatus: 'Erro ao encontrar lista de tipos'\n      }));\n      return result;\n    });\n\n    _defineProperty(this, \"onSubmit\", () => {\n      const {\n        neighborhood,\n        price,\n        type,\n        purpose\n      } = this.state;\n\n      if (contactEmail.length === 0 || contactName.length === 0) {\n        this.setState({\n          sendStatus: 'Ops, algo de errado aconteceu, recarregue a pÃ¡gina!!'\n        });\n      } else {\n        this.setState({\n          sendStatus: 'Enviando ...'\n        });\n        fetch('https://dry-island-26655.herokuapp.com/contactLMS', {\n          method: 'post',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: _JSON$stringify({\n            email: contactEmail,\n            message: contactMessage,\n            name: contactName,\n            phone: contactPhone\n          })\n        }).then(response => response.json()).then(message => {\n          if (message) {\n            this.setState({\n              sendStatus: 'Enviada com sucesso'\n            });\n          }\n        }).catch(err => {\n          this.setState({\n            sendStatus: 'Algo deu errado, tente novamente mais tarde'\n          });\n        });\n      }\n    });\n\n    this.state = {\n      neighborhood: [],\n      type: [],\n      purpose: '',\n      sendStatus: ''\n    };\n  } //   componentDidMount() {\n  //     this.getNeighborhoodList();\n  //     this.getTypeList();\n  //   }\n\n\n  static async getInitialProps({\n    req\n  }) {\n    this.getNeighborhoodList();\n    this.getTypeList();\n    return {\n      userAgent\n    };\n  }\n\n  render() {\n    const {\n      neighborhood,\n      type,\n      sendStatus\n    } = this.state;\n    return __jsx(\"form\", {\n      method: \"\",\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, \"Inserir Propriedade\"), __jsx(Select, {\n      hasLabel: true,\n      htmlFor: \"select\",\n      label: \"Bairro\",\n      options: neighborhood,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }), __jsx(Select, {\n      hasLabel: true,\n      htmlFor: \"select\",\n      label: \"Tipo de im\\xF3vel\",\n      options: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }), __jsx(Radio, {\n      hasLabel: true,\n      htmlFor: \"radioOne\",\n      label: \"Loca\\xE7\\xE3o\",\n      name: \"radios\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), __jsx(Radio, {\n      hasLabel: true,\n      htmlFor: \"radioTwo\",\n      label: \"Venda\",\n      name: \"radios\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }), __jsx(Input, {\n      hasLabel: true,\n      htmlFor: \"numberInput\",\n      label: \"Pre\\xE7o\",\n      required: true,\n      type: \"number\",\n      min: \"0\",\n      max: \"10000000000\",\n      step: \"500\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }), __jsx(\"fieldset\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, __jsx(\"button\", {\n      type: type || 'button',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }, \"Cadastrar\")), sendStatus);\n  }\n\n} // const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\n\nconst Label = props => {\n  const {\n    hasLabel,\n    label,\n    htmlFor\n  } = props;\n\n  if (hasLabel === true) {\n    return __jsx(\"label\", {\n      htmlFor: htmlFor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }, label);\n  }\n\n  return null;\n};\n\nconst Input = props => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    hasLabel,\n    max,\n    min,\n    placeholder,\n    step,\n    type\n  } = props;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: htmlFor,\n    max: max || null,\n    min: min || null,\n    name: name || null,\n    placeholder: placeholder || null,\n    required: required || null,\n    step: step || null,\n    type: type || 'text',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }));\n};\n\nconst Radio = props => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    setPurposeValue,\n    purpose\n  } = props;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    type: \"radio\",\n    onClick: setPurposeValue,\n    value: purpose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }), label));\n};\n\nconst Select = props => {\n  const {\n    hasLabel,\n    htmlFor,\n    label,\n    name,\n    required,\n    options\n  } = props;\n  const arrayOptions = options.map(item => item.name || item.type); // eslint-disable-next-line max-len\n\n  const selectOptionsList = arrayOptions.map((option, index) => __jsx(\"option\", {\n    key: option,\n    value: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 288\n    },\n    __self: this\n  }, option));\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 291\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 292\n    },\n    __self: this\n  }), __jsx(\"select\", {\n    defaultValue: \"\",\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 304\n    },\n    __self: this\n  }, \"Escolha uma op\\xE7\\xE3o\"), selectOptionsList));\n};\n\nexport default PropertyManagement;","map":{"version":3,"sources":["/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx"],"names":["React","fetch","PropertyManagement","Component","constructor","props","result","then","res","json","list","setState","neighborhood","catch","sendStatus","type","price","purpose","state","contactEmail","length","contactName","method","headers","body","email","message","contactMessage","name","phone","contactPhone","response","err","getInitialProps","req","getNeighborhoodList","getTypeList","userAgent","render","Label","hasLabel","label","htmlFor","Input","required","max","min","placeholder","step","Radio","setPurposeValue","Select","options","arrayOptions","map","item","selectOptionsList","option","index"],"mappings":"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","sourcesContent":["/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\n\nclass PropertyManagement extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      neighborhood: [],\n      type: [],\n      purpose: '',\n      sendStatus: '',\n    };\n  }\n\n  //   componentDidMount() {\n  //     this.getNeighborhoodList();\n  //     this.getTypeList();\n  //   }\n  static async getInitialProps({ req }) {\n    this.getNeighborhoodList();\n    this.getTypeList();\n    return { userAgent };\n  }\n\n  getNeighborhoodList = async () => {\n    const result = await fetch('http://localhost:8000/neighborhood')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ neighborhood: list });\n        }\n      })\n      .catch(() => this.setState({ sendStatus: 'Erro ao encontrar lista de bairros' }));\n\n    return result;\n  }\n\n  getTypeList = async () => {\n    const result = await fetch('http://localhost:8000/typeproperty')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ type: list });\n        }\n      })\n      .catch(() => this.setState({ sendStatus: 'Erro ao encontrar lista de tipos' }));\n\n    return result;\n  }\n\n  onSubmit = () => {\n    const {\n      neighborhood,\n      price,\n      type,\n      purpose,\n    } = this.state;\n\n    if (contactEmail.length === 0 || contactName.length === 0) {\n      this.setState({\n        sendStatus: 'Ops, algo de errado aconteceu, recarregue a pÃ¡gina!!',\n      });\n    } else {\n      this.setState({ sendStatus: 'Enviando ...' });\n      fetch('https://dry-island-26655.herokuapp.com/contactLMS', {\n        method: 'post',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          email: contactEmail,\n          message: contactMessage,\n          name: contactName,\n          phone: contactPhone,\n        }),\n      })\n        .then((response) => response.json())\n        .then((message) => {\n          if (message) {\n            this.setState({\n              sendStatus: 'Enviada com sucesso',\n            });\n          }\n        })\n        .catch((err) => {\n          this.setState({\n            sendStatus: 'Algo deu errado, tente novamente mais tarde',\n          });\n        });\n    }\n  }\n\n  render() {\n    const {\n      neighborhood,\n      type,\n      sendStatus,\n    } = this.state;\n\n    return (\n      <form method=\"\" action=\"\">\n        <h2>Inserir Propriedade</h2>\n\n\n        <Select\n          hasLabel\n          htmlFor=\"select\"\n          label=\"Bairro\"\n          options={neighborhood}\n        />\n\n        <Select\n          hasLabel\n          htmlFor=\"select\"\n          label=\"Tipo de imÃ³vel\"\n          options={type}\n        />\n\n        {/*\n        <Checkbox\n          hasLabel\n          htmlFor=\"checkbox\"\n          label=\"Checkbox\"\n          required\n        /> */}\n\n        <Radio\n          hasLabel\n          htmlFor=\"radioOne\"\n          label=\"LocaÃ§Ã£o\"\n          name=\"radios\"\n          required\n        />\n\n        <Radio\n          hasLabel\n          htmlFor=\"radioTwo\"\n          label=\"Venda\"\n          name=\"radios\"\n          required\n        />\n\n        <Input\n          hasLabel\n          htmlFor=\"numberInput\"\n          label=\"PreÃ§o\"\n          required\n          type=\"number\"\n          min=\"0\"\n          max=\"10000000000\"\n          step=\"500\"\n        />\n\n        <fieldset>\n          <button\n            type={type || 'button'}\n          >\n            Cadastrar\n          </button>\n        </fieldset>\n        {sendStatus}\n\n      </form>\n    );\n  }\n}\n\n\n// const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\nconst Label = (props) => {\n  const {\n    hasLabel,\n    label,\n    htmlFor,\n  } = props;\n\n  if (hasLabel === true) {\n    return <label htmlFor={htmlFor}>{label}</label>;\n  }\n\n  return null;\n};\n\nconst Input = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    hasLabel,\n    max,\n    min,\n    placeholder,\n    step,\n    type,\n  } = props;\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <input\n        id={htmlFor}\n        max={max || null}\n        min={min || null}\n        name={name || null}\n        placeholder={placeholder || null}\n        required={required || null}\n        step={step || null}\n        type={type || 'text'}\n      />\n    </fieldset>\n  );\n};\n\nconst Radio = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    setPurposeValue,\n    purpose,\n  } = props;\n\n  return (\n    <fieldset>\n      <label\n        htmlFor={htmlFor}\n        label={label}\n      >\n        <input\n          id={htmlFor}\n          name={name || null}\n          required={required || null}\n          type=\"radio\"\n          onClick={setPurposeValue}\n          value={purpose}\n        />\n        {label}\n      </label>\n    </fieldset>\n  );\n};\n\n\nconst Select = (props) => {\n  const {\n    hasLabel,\n    htmlFor,\n    label,\n    name,\n    required,\n    options,\n  } = props;\n\n  const arrayOptions = options.map((item) => item.name || item.type);\n\n  // eslint-disable-next-line max-len\n  const selectOptionsList = arrayOptions.map((option, index) => <option key={option} value={index}>{option}</option>);\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <select\n        defaultValue=\"\"\n        id={htmlFor}\n        name={name || null}\n        required={required || null}\n      >\n        <option value=\"\" disabled>Escolha uma opÃ§Ã£o</option>\n\n        {selectOptionsList}\n      </select>\n    </fieldset>\n  );\n};\n\n\nexport default PropertyManagement;\n"]},"metadata":{},"sourceType":"module"}