{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx\";\nvar __jsx = React.createElement;\n\n/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\nimport enums from '../../enums';\n\nclass PropertyManagement extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"getNeighborhoodList\", async () => {\n      const result = await fetch('http://localhost:8000/neighborhood').then(res => res.json()).then(list => {\n        if (list) {\n          this.setState({\n            neighborhood: list\n          });\n        }\n      }).catch(() => this.setState({\n        message: 'Erro ao encontrar lista de bairros'\n      }));\n      return result;\n    });\n\n    _defineProperty(this, \"getTypeList\", async () => {\n      const result = await fetch('http://localhost:8000/typeproperty').then(res => res.json()).then(list => {\n        if (list) {\n          this.setState({\n            type: list\n          });\n        }\n      }).catch(() => this.setState({\n        message: 'Erro ao encontrar lista de tipos'\n      }));\n      return result;\n    });\n\n    this.state = {\n      data: props.data,\n      neighborhood: [],\n      type: [],\n      messages: '',\n      purpose: ''\n    };\n  }\n\n  componentDidMount() {\n    this.getNeighborhoodList();\n    this.getTypeList();\n  } //   setPurposeValue = (e) => {\n  //     this.setState(e.target.value);\n  //   }\n\n\n  render() {\n    const {\n      neighborhood,\n      messages,\n      type,\n      purpose\n    } = this.state;\n    return __jsx(\"form\", {\n      method: \"\",\n      action: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, __jsx(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, \"Inserir Propriedade\"), __jsx(Select, {\n      hasLabel: true,\n      htmlFor: \"select\",\n      label: \"Bairro\",\n      options: neighborhood,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), __jsx(Select, {\n      hasLabel: true,\n      htmlFor: \"select\",\n      label: \"Tipo de im\\xF3vel\",\n      options: type,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), __jsx(Radio, {\n      hasLabel: true //   setPurposeValue={this.setPurposeValue}\n      ,\n      htmlFor: \"radioOne\",\n      label: \"Loca\\xE7\\xE3o\",\n      name: \"radios\",\n      purpose: enums.purposeOfProperty.renting,\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), __jsx(Radio, {\n      hasLabel: true,\n      htmlFor: \"radioTwo\",\n      label: \"Venda\" //   setPurposeValue={this.setPurposeValue}\n      ,\n      purpose: enums.purposeOfProperty.selling,\n      name: \"radios\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }), __jsx(Input, {\n      hasLabel: true,\n      htmlFor: \"numberInput\",\n      label: \"Pre\\xE7o\",\n      required: true,\n      type: \"number\",\n      purpose: purpose,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }), __jsx(Button, {\n      type: \"submit\",\n      value: \"submit\",\n      text: \"Send form\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }));\n  }\n\n}\n\nconst Button = props => {\n  const {\n    type,\n    value,\n    text\n  } = props;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137\n    },\n    __self: this\n  }, __jsx(\"button\", {\n    type: type || 'button',\n    value: value || null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, text));\n}; // const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\n\nconst Label = props => {\n  const {\n    hasLabel,\n    label,\n    htmlFor\n  } = props;\n\n  if (hasLabel === true) {\n    return __jsx(\"label\", {\n      htmlFor: htmlFor,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, label);\n  }\n\n  return null;\n};\n\nconst Input = props => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    hasLabel,\n    placeholder,\n    type,\n    purpose\n  } = props;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203\n    },\n    __self: this\n  }), __jsx(\"input\", {\n    id: htmlFor,\n    max: purpose == enums.purposeOfProperty.renting ? 50000 : 10000000 || null,\n    min: purpose == enums.purposeOfProperty.renting ? 200 : 10000 || null,\n    name: name || null,\n    placeholder: placeholder || null,\n    required: required || null,\n    step: purpose == enums.purposeOfProperty.renting ? 50 : 5000 || null,\n    type: type || 'text',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209\n    },\n    __self: this\n  }));\n};\n\nconst Radio = props => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    setPurposeValue,\n    purpose\n  } = props;\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235\n    },\n    __self: this\n  }, __jsx(\"input\", {\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    type: \"radio\",\n    onClick: setPurposeValue,\n    value: purpose,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239\n    },\n    __self: this\n  }), label));\n};\n\nconst Select = props => {\n  const {\n    hasLabel,\n    htmlFor,\n    label,\n    name,\n    required,\n    options\n  } = props;\n  const arrayOptions = options.map(item => item.name || item.type); // eslint-disable-next-line max-len\n\n  const selectOptionsList = arrayOptions.map((option, index) => __jsx(\"option\", {\n    key: option,\n    value: index,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 267\n    },\n    __self: this\n  }, option));\n  return __jsx(\"fieldset\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 270\n    },\n    __self: this\n  }, __jsx(Label, {\n    hasLabel: hasLabel,\n    htmlFor: htmlFor,\n    label: label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 271\n    },\n    __self: this\n  }), __jsx(\"select\", {\n    defaultValue: \"\",\n    id: htmlFor,\n    name: name || null,\n    required: required || null,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 277\n    },\n    __self: this\n  }, __jsx(\"option\", {\n    value: \"\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 283\n    },\n    __self: this\n  }, \"Escolha uma op\\xE7\\xE3o\"), selectOptionsList));\n};\n\nexport default PropertyManagement;","map":{"version":3,"sources":["/Users/lucasbertolo/Desktop/projects/portaldavila/portal/src/components/AreaUser/PropertyManagement.jsx"],"names":["React","fetch","enums","PropertyManagement","Component","constructor","props","result","then","res","json","list","setState","neighborhood","catch","message","type","state","data","messages","purpose","componentDidMount","getNeighborhoodList","getTypeList","render","purposeOfProperty","renting","selling","Button","value","text","Label","hasLabel","label","htmlFor","Input","name","required","placeholder","Radio","setPurposeValue","Select","options","arrayOptions","map","item","selectOptionsList","option","index"],"mappings":"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","sourcesContent":["/* eslint-disable react/button-has-type */\nimport React from 'react';\nimport fetch from 'isomorphic-fetch';\n\nimport enums from '../../enums';\n\nclass PropertyManagement extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n      neighborhood: [],\n      type: [],\n      messages: '',\n      purpose: '',\n    };\n  }\n\n\n  componentDidMount() {\n    this.getNeighborhoodList();\n    this.getTypeList();\n  }\n\n  //   setPurposeValue = (e) => {\n  //     this.setState(e.target.value);\n  //   }\n\n  getNeighborhoodList = async () => {\n    const result = await fetch('http://localhost:8000/neighborhood')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ neighborhood: list });\n        }\n      })\n      .catch(() => this.setState({ message: 'Erro ao encontrar lista de bairros' }));\n\n    return result;\n  }\n\n  getTypeList = async () => {\n    const result = await fetch('http://localhost:8000/typeproperty')\n      .then((res) => res.json())\n      .then((list) => {\n        if (list) {\n          this.setState({ type: list });\n        }\n      })\n      .catch(() => this.setState({ message: 'Erro ao encontrar lista de tipos' }));\n\n    return result;\n  }\n\n  render() {\n    const {\n      neighborhood,\n      messages,\n      type,\n      purpose,\n    } = this.state;\n\n    return (\n      <form method=\"\" action=\"\">\n        <h2>Inserir Propriedade</h2>\n\n\n        <Select\n          hasLabel\n          htmlFor=\"select\"\n          label=\"Bairro\"\n          options={neighborhood}\n        />\n\n        <Select\n          hasLabel\n          htmlFor=\"select\"\n          label=\"Tipo de imóvel\"\n          options={type}\n        />\n        {/*\n        <Checkbox\n          hasLabel\n          htmlFor=\"checkbox\"\n          label=\"Checkbox\"\n          required\n        /> */}\n\n        <Radio\n          hasLabel\n        //   setPurposeValue={this.setPurposeValue}\n          htmlFor=\"radioOne\"\n          label=\"Locação\"\n          name=\"radios\"\n          purpose={enums.purposeOfProperty.renting}\n          required\n        />\n\n        <Radio\n          hasLabel\n          htmlFor=\"radioTwo\"\n          label=\"Venda\"\n        //   setPurposeValue={this.setPurposeValue}\n          purpose={enums.purposeOfProperty.selling}\n          name=\"radios\"\n          required\n        />\n\n        <Input\n          hasLabel\n          htmlFor=\"numberInput\"\n          label=\"Preço\"\n          required\n          type=\"number\"\n          purpose={purpose}\n        />\n\n        <Button\n          type=\"submit\"\n          value=\"submit\"\n          text=\"Send form\"\n        />\n\n      </form>\n    );\n  }\n}\n\nconst Button = (props) => {\n  const {\n    type,\n    value,\n    text,\n  } = props;\n\n  return (\n    <fieldset>\n      <button\n        type={type || 'button'}\n        value={value || null}\n      >\n        {text}\n      </button>\n    </fieldset>\n  );\n};\n\n\n// const Checkbox = (props) => {\n//   const {\n//     htmlFor,\n//     label,\n//     name,\n//     required,\n//   } = props;\n\n//   return (\n//     <fieldset>\n//       <label\n//         htmlFor={htmlFor}\n//         label={label}\n//       >\n//         <input\n//           id={htmlFor}\n//           name={name || null}\n//           required={required || null}\n//           type=\"checkbox\"\n//         />\n//         {label}\n//       </label>\n//     </fieldset>\n//   );\n// };\n\nconst Label = (props) => {\n  const {\n    hasLabel,\n    label,\n    htmlFor,\n  } = props;\n\n  if (hasLabel === true) {\n    return <label htmlFor={htmlFor}>{label}</label>;\n  }\n\n  return null;\n};\n\nconst Input = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    hasLabel,\n    placeholder,\n    type,\n    purpose,\n  } = props;\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <input\n        id={htmlFor}\n        max={purpose == enums.purposeOfProperty.renting ? 50000 : 10000000 || null}\n        min={purpose == enums.purposeOfProperty.renting ? 200 : 10000 || null}\n        name={name || null}\n        placeholder={placeholder || null}\n        required={required || null}\n        step={purpose == enums.purposeOfProperty.renting ? 50 : 5000 || null}\n        type={type || 'text'}\n      />\n    </fieldset>\n  );\n};\n\nconst Radio = (props) => {\n  const {\n    htmlFor,\n    label,\n    name,\n    required,\n    setPurposeValue,\n    purpose,\n  } = props;\n\n  return (\n    <fieldset>\n      <label\n        htmlFor={htmlFor}\n        label={label}\n      >\n        <input\n          id={htmlFor}\n          name={name || null}\n          required={required || null}\n          type=\"radio\"\n          onClick={setPurposeValue}\n          value={purpose}\n        />\n        {label}\n      </label>\n    </fieldset>\n  );\n};\n\n\nconst Select = (props) => {\n  const {\n    hasLabel,\n    htmlFor,\n    label,\n    name,\n    required,\n    options,\n  } = props;\n\n  const arrayOptions = options.map((item) => item.name || item.type);\n\n  // eslint-disable-next-line max-len\n  const selectOptionsList = arrayOptions.map((option, index) => <option key={option} value={index}>{option}</option>);\n\n  return (\n    <fieldset>\n      <Label\n        hasLabel={hasLabel}\n        htmlFor={htmlFor}\n        label={label}\n      />\n\n      <select\n        defaultValue=\"\"\n        id={htmlFor}\n        name={name || null}\n        required={required || null}\n      >\n        <option value=\"\" disabled>Escolha uma opção</option>\n\n        {selectOptionsList}\n      </select>\n    </fieldset>\n  );\n};\n\n\nexport default PropertyManagement;\n"]},"metadata":{},"sourceType":"module"}